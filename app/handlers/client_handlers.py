import contextlib

from aiogram import Router, exceptions
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart

from app.keyboards import IKB, RKB
from app.config import config
from app.fsm import FSM
from app.database import get_statistics_text_from_db
from app.dispatcher import bot

router = Router()


@router.callback_query(FSM.query_waiting, lambda query: query.data == "start")
async def query_start(query: CallbackQuery, state: FSMContext):
    await query.message.edit_reply_markup(reply_markup=None)

    text = ("–í–æ–ø—Ä–æ—Å: –ï—Å—Ç—å –ª–∏ –≤–∞–º 23 –≥–æ–¥–∞?\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ ‚¨áÔ∏è")
    await query.message.answer(text=text)

    await state.set_state(FSM.first_answer_waiting)


@router.callback_query(lambda query: query.data == "statistics")
async def query_start(query: CallbackQuery):
    text = await get_statistics_text_from_db()
    await query.message.answer(text=text,
                               parse_mode=ParseMode.HTML)


@router.message(lambda message: message.text is not None, FSM.first_answer_waiting)
async def first_answer(message: Message, state: FSMContext):
    if message.text is None:
        await message.answer(text="–ù—É –≤—ã —á–µ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–∞ —Ö–æ—Ç—å –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã, –Ω–æ –Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –º–µ–¥–∏–∞ üëÄ")
        return

    await state.update_data(first=message.text)

    text = "–í–æ–ø—Ä–æ—Å: –í—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ –≤ –ú–æ—Å–∫–≤–µ –∏–ª–∏ –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏?"
    await message.answer(text=text)

    await state.set_state(FSM.second_answer_waiting)


@router.message(lambda message: message.text is not None, FSM.second_answer_waiting)
async def second_answer(message: Message, state: FSMContext):
    if message.text is None:
        await message.answer(text="–ù—É –≤—ã —á–µ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–∞ —Ö–æ—Ç—å –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã, –Ω–æ –Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –º–µ–¥–∏–∞ üëÄ")
        return

    await state.update_data(second=message.text)

    text = "–í–æ–ø—Ä–æ—Å: –ò–º–µ–µ—Ç—Å—è –ª–∏ —É –≤–∞—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ?"
    await message.answer(text=text)

    await state.set_state(FSM.third_answer_waiting)


@router.message(lambda message: message.text is not None, FSM.third_answer_waiting)
async def third_answer(message: Message, state: FSMContext):
    await state.update_data(third=message.text)

    text = "–ß—Ç–æ–±—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º ‚¨áÔ∏è"
    await message.answer(text=text,
                         reply_markup=await RKB.contact())

    await state.set_state(FSM.contact_waiting)


@router.message(lambda message: message.contact is not None, FSM.contact_waiting)
async def handle_contact(message: Message, state: FSMContext):
    text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã! –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
    await message.answer(text=text)

    state_data = await state.get_data()
    if message.chat.id not in config.admins_ids:
        await state.set_state(FSM.passed)
        await config.set_views(full_form=True)
        await state.update_data(passed=True)
    else:
        await state.clear()

    text = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –∞–Ω–∫–µ—Ç—É:\n"
            f"    –í–æ–ø—Ä–æ—Å: –ï—Å—Ç—å –ª–∏ –≤–∞–º 23 –≥–æ–¥–∞?\n"
            f"    –ù–∞–ø–∏—à–∏—Ç–µ ‚¨áÔ∏è\n"
            f"    –û—Ç–≤–µ—Ç: {state_data['first']}\n\n"
            f"    –í–æ–ø—Ä–æ—Å: –í—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ –≤ –ú–æ—Å–∫–≤–µ –∏–ª–∏ –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏?\n"
            f"    –û—Ç–≤–µ—Ç: {state_data['second']}\n\n"
            f"    –í–æ–ø—Ä–æ—Å: –ò–º–µ–µ—Ç—Å—è –ª–∏ —É –≤–∞—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ?\n"
            f"    –û—Ç–≤–µ—Ç: {state_data['third']}\n\n"
            f"–ù–µ–º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"    –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º: {message.chat.first_name if message.chat.first_name is not None else ''} "
            f"{message.chat.last_name if message.chat.last_name is not None else ''}\n"
            f"    –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username): {message.chat.username if message.chat.username else '–ù–µ—Ç—É'}\n"
            f"    –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä–∞: {message.contact.phone_number}")
    for admin_id in config.admins_ids:
        with contextlib.suppress(exceptions.TelegramForbiddenError, exceptions.TelegramBadRequest):
            await bot.send_message(chat_id=admin_id,
                                   text=text,
                                   reply_markup=await IKB.url_to_user(message.from_user.url))


@router.message()
@router.message(CommandStart)
async def command_start_handling(message: Message, state: FSMContext):
    if message.chat.id in config.admins_ids:
        await state.clear()
    else:
        state_data = await state.get_data()
        if state_data.get('passed', False):
            await message.answer(text="–í—ã –∂–µ —É–∂–µ –ø—Ä–æ—à–ª–∏ –∞–Ω–∫–µ—Ç—É üòÅ")
            return
        if not state_data.get('started', False):
            await config.set_views(views=True)
            await state.update_data(started=True)
        await state.update_data(passed=False)

    await state.update_data(first="")
    await state.update_data(second="")
    await state.update_data(third="")

    text, image_path = await config.get_text_img()
    if image_path is not None:
        photo = FSInputFile(image_path)
        await message.answer_photo(caption=text,
                                   photo=photo,
                                   reply_markup=await IKB.start(is_admin=(message.chat.id in config.admins_ids)),
                                   parse_mode=ParseMode.MARKDOWN_V2)
    else:
        await message.answer(text=text,
                             reply_markup=await IKB.start(is_admin=(message.chat.id in config.admins_ids)),
                             parse_mode=ParseMode.MARKDOWN_V2)

    await state.set_state(FSM.query_waiting)